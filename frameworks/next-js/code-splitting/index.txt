https://nextjs.org/learn/foundations/how-nextjs-works/code-splitting
Next.js has built-in support for code splitting. Each file inside your pages/ directory will be automatically code split into its own JavaScript bundle during the build step.

Further:
Any code shared between pages is also split into another bundle to avoid re-downloading the same code on further navigation.
After the initial page load, Next.js can start pre-loading the code of other pages users are likely to navigate to.
Dynamic imports are another way to manually split what code is initially loaded.

ChatGPT:
You can utilize dynamic imports for components that are not immediately needed or are less likely to be interacted with by the user. By doing so, you can improve the initial page load performance and prioritize the hydration of other interactive components.
Here's a breakdown of the benefits:
Faster initial page load: Dynamic imports and code splitting allow you to load only the essential components and code required for the initial page rendering. By splitting your code into smaller chunks and loading them on-demand, you can reduce the initial bundle size and improve the overall loading time of the page. This can lead to a faster and smoother user experience.
Prioritized hydration: With dynamic imports, you can control the order in which components are hydrated. By loading and hydrating non-interactive components later, you can prioritize the hydration of more critical interactive components. This means that the interactive components will become functional and ready for user interactions more quickly, enhancing the responsiveness of your application.
Better resource utilization: By dynamically loading components that are less likely to be interacted with, you can optimize the utilization of system resources. This approach avoids unnecessarily loading and executing JavaScript code for components that the user may not need or interact with immediately, resulting in a more efficient use of network bandwidth and browser resources.